#PacketFence apache configuration file

#Debian specific
<IfDefine debian>
  <IfModule !mod_version.c>
    LoadModule version_module /usr/lib/apache2/modules/mod_version.so
  </IfModule>
  <IfVersion >= 2.4>
    <IfModule !mod_authz_core.c>
      LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
    </IfModule>
    <IfModule !mod_authn_core.c>
      LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so
    </IfModule>
    <IfModule !mod_socache_shmcb.c>
      LoadModule socache_shmcb_module /usr/lib/apache2/modules/mod_socache_shmcb.so
    </IfModule>
    <IfModule !prefork.c>
      LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
    </IfModule>
  </IfVersion>
  <IfModule !mod_perl.c>
    LoadModule perl_module /usr/lib/apache2/modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module /usr/lib/apache2/modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_alias.c>
    LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
  </IfModule>
  <IfModule !mod_mime.c>
    LoadModule mime_module /usr/lib/apache2/modules/mod_mime.so
  </IfModule>
  <IfModule !mod_proxy.c>
    LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so
  </IfModule>
  <IfModule !proxy_http.c>
    LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so
  </IfModule>
  <IfModule !mod_apreq2.c>
    LoadModule apreq_module /usr/lib/apache2/modules/mod_apreq2.so
  </IfModule>
</IfDefine>

#RHEL specific
<IfDefine rhel>
  <IfModule !mod_version.c>
    LoadModule version_module modules/mod_version.so
  </IfModule>
  <IfVersion >= 2.4>
    <IfModule !mod_authz_core.c>
      LoadModule authz_core_module modules/mod_authz_core.so
    </IfModule>
    <IfModule !mod_authn_core.c>
      LoadModule authn_core_module modules/mod_authn_core.so
    </IfModule>
    <IfModule !prefork.c>
      LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
    </IfModule>
    <IfModule !mod_socache_shmcb.c>
      LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
    </IfModule>
  </IfVersion>
  <IfModule !mod_perl.c>
    LoadModule perl_module modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_alias.c>
    LoadModule alias_module modules/mod_alias.so
  </IfModule>
  <IfModule !mod_mime.c>
    LoadModule mime_module modules/mod_mime.so
  </IfModule>
  <IfModule !mod_proxy.c>
    LoadModule proxy_module modules/mod_proxy.so
  </IfModule>
  <IfModule !proxy_http.c>
    LoadModule proxy_http_module modules/mod_proxy_http.so
  </IfModule>
  <IfModule !mod_apreq2.c>
    LoadModule apreq_module modules/mod_apreq2.so
  </IfModule>
</IfDefine>

<IfVersion >= 2.4>
  Mutex posixsem default
</IfVersion>
<IfVersion < 2.4>
  AcceptMutex posixsem
</IfVersion>

PerlSwitches -I/usr/local/pf/lib
PerlSwitches -I/usr/local/pf/html/pfappserver/lib
PerlLoadModule pfappserver
PerlLoadModule pf::WebAPI::InitHandler
PerlChildInitHandler  pf::WebAPI::InitHandler::child_init

<Perl>
BEGIN {
    use pf::log 'service' => 'httpd.admin';
}

use pf::config qw();

my $PfConfig = \%pf::config::Config;
my $management_network = $pf::config::management_network;
my $install_dir = $pf::config::install_dir;
my $var_dir = $pf::config::var_dir;
my $vhost;

$PidFile = $install_dir.'/var/run/httpd.admin.pid';

$Include = $install_dir.'/conf/httpd.conf.d/log.conf';

if (defined($management_network->{'Tip'}) && $management_network->{'Tip'} ne '') {
    if (defined($management_network->{'Tvip'}) && $management_network->{'Tvip'} ne '') {
        $Listen = $management_network->{'Tvip'}.":".$PfConfig->{'ports'}{'admin'};
        $vhost = $management_network->{'Tvip'}.":".$PfConfig->{'ports'}{'admin'};
    } else {
        $Listen = $management_network->{'Tip'}.":".$PfConfig->{'ports'}{'admin'};
        $vhost = $management_network->{'Tip'}.":".$PfConfig->{'ports'}{'admin'};
   }
} else {
    $Listen = "0.0.0.0:".$PfConfig->{'ports'}{'admin'};
    $vhost = "0.0.0.0:".$PfConfig->{'ports'}{'admin'};
}

$User = "pf";
$Group = "pf";

$TypesConfig = '/etc/mime.types';

if (defined($PfConfig->{'alerting'}{'fromaddr'}) && $PfConfig->{'alerting'}{'fromaddr'} ne '') {
    $ServerAdmin = $PfConfig->{'alerting'}{'fromaddr'};
} else {
    $ServerAdmin = "root\@".$PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'};
}

$ServerTokens = "Prod";
$ServerSignature = "Off";
$UseCanonicalName = "Off";
$Timeout = "50";
$KeepAliveTimeout = "10";

$MaxClients = "20";
$StartServers = "2";
$MinSpareServers = "6";
$HostnameLookups = "off";
$MaxRequestsPerChild = "1000";

$SSLPassPhraseDialog = "builtin";
$SSLSessionCacheTimeout = "300";
$SSLRandomSeed = "startup builtin";
$SSLRandomSeed = "startup file:/dev/urandom 1024";
$SSLRandomSeed = "connect builtin";
$SSLRandomSeed = "connect file:/dev/urandom 1024";

push @{ $IfVersion{">= 2.4"} },
  {
  SSLSessionCache => "shmcb:".$install_dir."/var/ssl_acache(512000)",
  Mutex => "file:".$install_dir."/var/ssl_mutex ssl-cache",
  SSLProtocol => "All -SSLv2 -SSLv3",
  SSLCipherSuite =>
"EECDH+AES:EDH+AES:-SHA1:EECDH+RC4:EDH+RC4:RC4-SHA:EECDH+AES256:EDH+AES256:AES256-SHA:!aNULL:!eNULL:!EXP:!LOW:!MD5",
  };
push @{ $IfVersion{"< 2.4"} },
  {
  SSLSessionCache => "shm:".$install_dir."/var/ssl_acache(512000)",
  SSLMutex => "file:".$install_dir."/var/ssl_mutex",
  SSLProtocol => "All -SSLv2",
  SSLCipherSuite =>
"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK",
  };

$SSLHonorCipherOrder = "on";

$ErrorLog = $install_dir.'/logs/httpd.admin.error';

$NameVirtualHost => $vhost;
push @{ $VirtualHost{$vhost} },
    {
         ServerName   => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
         DocumentRoot => $install_dir.'/html/pfappserver/lib',
         ErrorLog     => $install_dir.'/logs/httpd.admin.error',
         CustomLog    => $install_dir.'/logs/httpd.admin.access combined',
         AllowEncodedSlashes => "on",
         SSLEngine    => 'on',
         Include      => $var_dir.'/conf/ssl-certificates.conf',
         SSLProxyEngine    => 'on',
         PerlModule        => 'pf::web::admin',
         PerlTransHandler  => 'pf::web::admin->proxy_portal',
         ProxyRequests     => 'off',
         ProxyPreserveHost => 'on',
         ProxyVia          => 'off',
         Alias        => '/static '.$install_dir.'/html/pfappserver/root/static',
         Location     => {
             "/" => {
                 SetHandler => 'modperl',
                 PerlResponseHandler => 'pfappserver',
             },
             "/static" => {
                 SetHandler => 'default-handler',
             },
         },
    };

</Perl>
