#Proxy interception configuration file

#Debian specific
<IfDefine debian>
  <IfVersion >= 2.4>
    <IfModule !mod_authz_core.c>
      LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
    </IfModule>
    <IfModule !mod_authn_core.c>
      LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so
    </IfModule>
    <IfModule !mod_socache_shmcb.c>
      LoadModule socache_shmcb_module /usr/lib/apache2/modules/mod_socache_shmcb.so
    </IfModule>
    <IfModule !prefork.c>
      LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
    </IfModule>
  </IfVersion>
  <IfModule !mod_perl.c>
    LoadModule perl_module /usr/lib/apache2/modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module /usr/lib/apache2/modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_headers.c>
    LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so
  </IfModule>
  <IfModule !mod_proxy.c>
    LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so
  </IfModule>
  <IfModule !mod_authz_host.c>
    LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so
  </IfModule>
  <IfModule !mod_setenvif.c>
    LoadModule setenvif_module /usr/lib/apache2/modules/mod_setenvif.so
  </IfModule>
  <IfModule !mod_rewrite.c>
    LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so
  </IfModule>
  <IfModule !mod_alias.c>
    LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
  </IfModule>
  <IfModule !mod_mime.c>
    LoadModule mime_module /usr/lib/apache2/modules/mod_mime.so
  </IfModule>
  <IfModule !mod_apreq2.c>
    LoadModule apreq_module /usr/lib/apache2/modules/mod_apreq2.so
  </IfModule>
  <IfModule !proxy_http.c>
    LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so
  </IfModule>
  <IfModule !mod_proxy_connect.c>
   LoadModule proxy_connect_module /usr/lib/apache2/modules/mod_proxy_connect.so
  </IfModule>
</IfDefine>

#RHEL specific
<IfDefine rhel>
  <IfVersion >= 2.4>
    <IfModule !mod_authz_core.c>
      LoadModule authz_core_module modules/mod_authz_core.so
    </IfModule>
    <IfModule !mod_authn_core.c>
      LoadModule authn_core_module modules/mod_authn_core.so
    </IfModule>
    <IfModule !prefork.c>
      LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
    </IfModule>
    <IfModule !mod_socache_shmcb.c>
      LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
    </IfModule>
  </IfVersion>
  <IfModule !mod_perl.c>
    LoadModule perl_module modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_headers.c>
    LoadModule headers_module modules/mod_headers.so
  </IfModule>
  <IfModule !mod_proxy.c>
    LoadModule proxy_module modules/mod_proxy.so
  </IfModule>
  <IfModule !mod_authz_host.c>
    LoadModule authz_host_module modules/mod_authz_host.so
  </IfModule>
  <IfModule !mod_setenvif.c>
    LoadModule setenvif_module modules/mod_setenvif.so
  </IfModule>
  <IfModule !mod_rewrite.c>
    LoadModule rewrite_module modules/mod_rewrite.so
  </IfModule>
  <IfModule !mod_alias.c>
    LoadModule alias_module modules/mod_alias.so
  </IfModule>
  <IfModule !mod_mime.c>
    LoadModule mime_module modules/mod_mime.so
  </IfModule>
  <IfModule !mod_apreq2.c>
    LoadModule apreq_module modules/mod_apreq2.so
  </IfModule>
  <IfModule !proxy_http.c>
    LoadModule proxy_http_module modules/mod_proxy_http.so
  </IfModule>
  <IfModule !mod_proxy_connect.c>
   LoadModule proxy_connect_module modules/mod_proxy_connect.so
  </IfModule>
</IfDefine>

PerlSwitches -I/usr/local/pf/lib
PerlPostConfigRequire /usr/local/pf/lib/pf/web/proxy_modperl_require.pl
PerlModule APR::Table
AcceptMutex posixsem

# Prevent Browsers (Chrome and Firefox) to cache DNS while under the captive portal
Header always set X-DNS-Prefetch-Control off


SetEnvIf User-Agent ".*MSIE.*" \
  nokeepalive ssl-unclean-shutdown \
  downgrade-1.0 force-response-1.0

TypesConfig /etc/mime.types

<Perl>
use pf::config qw();
use Tie::DxHash;
use pf::services::manager::httpd;

sub gen_conf {
    my %conf;
    tie %conf, 'Tie::DxHash';

    %conf = @_;
    return \%conf;
}

my $PfConfig = \%pf::config::Config;
my $management_network = $pf::config::management_network;
my $install_dir = $pf::config::install_dir;
my $var_dir = $pf::config::var_dir;
my @internal_nets = @pf::config::internal_nets;
my $host;
my $vhost;

$PidFile = $install_dir.'/var/run/httpd.proxy.pid';

$Include = $install_dir.'/conf/httpd.conf.d/log.conf';

$User = "pf";
$Group = "pf";

if (defined($PfConfig->{'alerting'}{'fromaddr'}) && $PfConfig->{'alerting'}{'fromaddr'} ne '') {
    $ServerAdmin = $PfConfig->{'alerting'}{'fromaddr'};
} else {
    $ServerAdmin = "root\@".$PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'};
}

$ServerTokens = "Prod";
$ServerSignature = "Off";
$UseCanonicalName = "Off";
$Timeout = "50";
$KeepAliveTimeout = "10";

$MaxClients = pf::services::manager::httpd::calculate_max_clients(pf::services::manager::httpd::get_total_system_memory());
$StartServers = pf::services::manager::httpd::calculate_start_servers($MaxClients);
$MinSpareServers = pf::services::manager::httpd::calculate_min_spare_servers($MaxClients);

$HostnameLookups = "off";
$MaxRequestsPerChild = "1000";


$ErrorLog = $install_dir.'/logs/httpd.proxy.error';
$CustomLog = $install_dir.'/logs/httpd.proxy.access combined';

foreach my $port (split(',',$PfConfig->{'trapping'}{'interception_proxy_port'})) {
    push (@NameVirtualHost,"*:".$port);
}

push (@NameVirtualHost,"*:444");
push (@Listen,"127.0.0.1:444");
push @{ $VirtualHost{'*:444'} }, gen_conf(
    ServerName        => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'}.":444",
    PerlOptions       => '+GlobalRequest',
    SSLEngine         => 'on',
    SSLProxyEngine    => 'on',
    Include           => $var_dir.'/conf/ssl-certificates.conf',
    PerlModule        => 'pf::web::interceptproxy',
    PerlTransHandler  => '+pf::web::interceptproxy::reverse',
    ProxyRequests     => 'off',
    ProxyPreserveHost => 'on',
    ProxyVia          => 'off',
    LogLevel          => 'debug',
    ErrorLog          => $install_dir.'/logs/httpd.proxy.reverse.error',
    CustomLog         => $install_dir.'/logs/httpd.proxy.reverse.access combined',
);


foreach my $interface (@internal_nets) {
    if (defined($interface->{'Tvip'}) && $interface->{'Tvip'} ne '') {
        $vhost = $interface->{'Tvip'};
    } else {
        $vhost = $interface->{'Tip'};
    }

    foreach my $port (split(',',$PfConfig->{'trapping'}{'interception_proxy_port'})) {
        push (@Listen,$vhost.":".$port);
        push @{ $VirtualHost{$vhost.":".$port} }, gen_conf(
             ServerName        => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'}.":".$port,
             PerlOptions       => '+GlobalRequest',
             PerlModule        => 'pf::web::interceptproxy',
             PerlTransHandler  => '+pf::web::interceptproxy::translate',
             ProxyRequests     => 'On',
             ProxyPreserveHost => 'On',
             AllowCONNECT      => '444 443',
             ProxyVia          => 'full',
             ErrorLog          => $install_dir.'/logs/httpd.proxy.error',
             CustomLog         => $install_dir.'/logs/httpd.proxy.access combined',
        );
    }
}

</Perl>
