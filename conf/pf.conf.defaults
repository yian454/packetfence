[general]
#
# general.domain
#
# Domain name of PacketFence system.
domain=packetfence.org
#
# general.hostname
#
# Hostname of PacketFence system.  This is concatenated with the domain in Apache rewriting rules and therefore must be resolvable by clients.
hostname=packetfence
#
# general.dnsservers
#
# Comma-delimited list of DNS servers.  Passthroughs are created to allow queries to these servers from even "trapped" nodes.
dnsservers=127.0.0.1
#
# general.dhcpservers
#
# Comma-delimited list of DHCP servers.  Passthroughs are created to allow DHCP transactions from even "trapped" nodes.
dhcpservers=127.0.0.1
#
# general.timezone
#
# System's timezone in string format. Supported list:
# http://www.php.net/manual/en/timezones.php
timezone=America/Montreal
#
# general.memcached
#
# Server list of the memcached server
memcached=127.0.0.1:11211

[network]
#
# network.dhcpdetector
#
# If enabled, PacketFence will monitor DHCP-specific items such as rogue DHCP services, DHCP-based OS fingerprinting, computername/hostname 
# resolution, and (optionnally) option-82 location-based information.  The monitored DHCP packets are DHCPDISCOVERs and DHCPREQUESTs - both are broadcasts, 
# meaning a span port is not necessary.  This feature is highly recommended if the internal network is DHCP-based.
dhcpdetector=enabled
#
# network.rogue_dhcp_detection
#
# Tries to identify Rogue DHCP Servers and triggers the 1100010 violation if one is found.
# This feature is only available if the dhcpdetector is activated.
rogue_dhcp_detection=enabled
#
# network.rogueinterval
#
# When rogue DHCP server detection is enabled, this parameter defines how often to email administrators.  With its default 
# setting of 10, it will email administrators the details of the previous 10 DHCP offers.
rogueinterval=10
#
# network.dhcpoption82logger
#
# If enabled PacketFence will monitor DHCP option82 location-based information.
# This feature is only available if the dhcpdetector is activated.
dhcpoption82logger=disabled
#
# network.dhcp_filter_by_message_types
#
# Which dhcp message types are being listened by the pfdhcplistener.
# Do not change unless you know what you are doing
dhcp_filter_by_message_types=DHCPOFFER,DHCPREQUEST,DHCPDECLINE,DHCPACK,DHCPRELEASE
#
# network.interfaceSNAT
# Choose interface(s) where you want to enable snat for passthrough (by default it's the management interface)
interfaceSNAT=
#
#
# This section allows you to configure locally proxied content.  We typically use this to proxy tools like Stinger rather 
# than having to continually download the latest version. Ex:
# 
# <i>tools/stinger.exe=http://download.nai.com/products/mcafee-avert/stng260.exe</i>
# 
# The Stinger utility could then be accessed at https://pfhostname/proxies/tools/stinger.exe.
[proxies]
tools/stinger.exe=http://download.nai.com/products/mcafee-avert/stng260.exe

[trapping]
#
# trapping.range
#
# Comma-delimited list of address ranges/CIDR blocks that PacketFence will monitor/detect/trap on.  Gateway, network, and 
# broadcast addresses are ignored.
range=192.168.0.0/24
#
# trapping.registration
#
# If enabled, nodes will be required to register on first network access.  Further registration options are configured in the 
# registration section.
registration=enabled
#
# trapping.redirtimer
#
# How long to display the progress bar during trap release. Default value is 
# based on VLAN enforcement techniques. Inline enforcement only users could
# lower the value.
redirtimer=20s
# 
# trapping.wait_for_redirect
#
# How many seconds should the WebAPI sleep before actually triggering the VLAN change.
# This is meant to give the device enough time to fetch the redirection page before 
# switching VLAN.
wait_for_redirect = 1
#
# trapping.whitelist
#
# Comma-delimited list of MAC addresses that are immune to isolation. In 
# inline level 2 enforcement, the firewall is opened for them as if they were 
# registered. This "feature" will probably be reworked in the future.
whitelist=
#
# trapping.detection
#
# Enables snort-based worm detection.  If you don't have a span interface available, don't bother enabling it.  If you do, 
# you'll most definately want this on.
detection=disabled

#
# trapping.detection_engine
#
# Let you choose from our supported IDS: snort or suricata
#
detection_engine=snort

#
# trapping.wireless_ips
#
# Enable wids trapping detection
wireless_ips=disabled

#
# Set the threshold for wids
#
wireless_ips_threshold=90

#
# trapping.passthrough
#
# When enabled, pfdns will resolve the real IP addresses of passthroughs and add them in the ipset session to give access
# to trapped devices. DonÂ´t forget to enable ip_forward on your server.
passthrough=disabled
#
# trapping.passthroughs
#
# Comma-delimited list of domains to be used as HTTP and HTTPS passthroughs to web sites.
#
passthroughs=
#
# trapping.proxy_passthroughs
#
# Comma-delimited list of domains to be use for apache passthrough
proxy_passthroughs=
#
# trapping.interception_proxy
#
# When enabled, packetfence will intercept proxy request to somes specified port
interception_proxy=disabled
#
# trapping.interception_proxy_port
#
# Comma-delimited list of port used to intercept proxy traffic
interception_proxy_port=8080,3128


[registration]
#
# registration.button_text
#
#
button_text=Register
#
# registration.device_registration
#
# Enable or Disable the ability to register a gaming device using the specific portal page designed to do it
device_registration=disabled
#
# registration.device_registration_role
#
# The role to assign to gaming devices. If none is specified, the role of the registrant is used.
device_registration_role=

[guests_self_registration]
#
# guests_self_registration.guest_pid
#
# What field should we assign to the pid of the guest? Defaults to email.
guest_pid=email
#
# guests_self_registration.preregistration
# 
# Enabling this allows guests to requests their access in advance. You
# must take care of opening your external firewall up to PacketFence and
# make sure your server can send emails properly (generated
# username/password are sent by email).
preregistration=disabled
#
# guests_self_registration.sponsorship_cc
# 
# Sponsors requesting access and access confirmation emails are CC'ed to this
# address. Multiple destinations can be comma separated.
sponsorship_cc=

[guests_admin_registration]
#
# guests_admin_registration.access_duration_choices
#
# These are all the choices offered in the guest management interface as 
# possible access duration values for a given registration.
access_duration_choices=1h,3h,12h,1D,2D,3D,5D
#
# guests_admin_registration.default_access_duration
#
# This is the default access duration value selected in the dropdown on the 
# guest management interface.
default_access_duration=12h

[alerting]
#
# alerting.emailaddr
#
# Email address to which notifications of rogue DHCP servers, violations with an action of "email", or any other 
# PacketFence-related message goes to.
emailaddr=pf@localhost
#
# alerting.fromaddr
#
# Source email address for email notifications. Empty means root@<server-domain-name>.
fromaddr=
#
# alerting.smtpserver
#
# Server through which to send messages to the above emailaddr.  The default is localhost - be sure you're running an SMTP 
# host locally if you don't change it!
smtpserver=localhost
#
# alerting.subjectprefix
#
#Subject prefix for email notifications of rogue DHCP servers, violations with an action of "email", or any other
#PacketFence-related message.
subjectprefix=PF Alert:
#
# alerting.log
#
# Log file where "log" actions are sent.
log=violation.log
#
# alerting.wins_server
#
# WINS server to  resolve NetBIOS name of administrative workstation to IP address.
wins_server=192.168.0.100
#
# alerting.admin_netbiosname
#
# NetBIOS name of administrative workstation to send alerts with "winpopup" action assigned.
admin_netbiosname=EXAMPLE

[ports]
#
# ports.admin
#
# Port the administrative interface listens on.
admin=1443
#
# ports.soap
#
# Port of the soap interface listens on.
soap=9090
#
# ports.aaa
#
# Port of the aaa http interface listens on.
aaa=7070
#
#port.pf_status
#
# Port of the packetfence status http interface listends on.
pf_status=9191

[scan]
#
# scan.engine
#
# Which scan engine to use to perform client-side policy compliance.
engine=none
#
# scan.registration
#
# If this option is enabled, the PF system will scan each host after
# registration is complete.
registration=disabled
#
# scan.dot1x
#
# If this option is enabled, the PF system will scan all the machines after a 802.1x
# autoregister connection
dot1x=disabled
#
#scan.dot1x_type
#
# List of the EAP-Type that pass into the scan engine
dot1x_type=MS-CHAP-V2
#
# scan.duration
#
# Approximate duration of a scan. User being scanned on registration are presented a progress bar 
# for this duration, afterwards the browser refreshes until scan is complete.
duration=60s
#
# scan.host
#
# Host the scanning engine is running on.  For performance reasons, we
# recommend running the scanning engine on a remote server. A passthrough will
# be automagically created.
host=127.0.0.1
#
# scan.user
#
# Username to log into scanning engine with.
user=admin
#
# scan.pass
#
# Password to log into scanning engine with.
pass=packet
#
# scan.nessus_port
#
# Remote port of the Nessus scanning engine. Default value should be fine in
# most cases.
nessus_port=8834
#
# scan.nessus_clientpolicy
#
# Name of the remote policy on the nessus server
nessus_clientpolicy=Internal Network Scan
#
# scan.openvas_port
#
# Remote port of the OpenVAS scanning engine. Default value should be fine in
# most cases.
openvas_port=9390
#
# scan.openvas_configid
#
# ID of the scanning configuration on the OpenVAS server
openvas_configid=
#
# scan.openvas_reportformatid
#
# ID of the .NBE report format on the OpenVAS server
openvas_reportformatid=f5c2a364-47d2-4700-b21d-0a7693daddab

[database]
#
# database.pass
#
# Password for the mysql database used by PacketFence.
pass=packet
#
# database.db
#
# Name of the mysql database used by PacketFence.
db=pf
#
# database.user
#
# Username of the account with access to the mysql database used by PacketFence.
user=pf
#
# database.port
#
# Port the mysql server is running on.
port=3306
#
# database.host
#
# Server the mysql server is running on.
host=localhost

[expire]
#
# expire.node
#
# Time before a node is removed due to inactivity.
# A value of 0D disables expiration.
# example:
# node=90D
node=0D
#
# expire.iplog
#
# Time which you would like to keep logs on IP/MAC information.
# A value of 0D disables expiration.
# example:
# iplog=180D
iplog=0D
#
# expire.traplog
#
# Time which you would like to keep logs on trap information.
# A value of 0D disables expiration.
# example:
# traplog=180D
traplog=0D
#
# expire.locationlog
#
# Time which you would like to keep logs on location information
# Please note that this table should not become too big since it 
# could degrade pfsetvlan performance.
# A value of 0D disables expiration.
# example:
# locationlog=180D
locationlog=0D
# expire.httpd_portal
#
# Time which you would like to keep logs on location information
httpd_portal=enabled
#
# expire.httpd_admin
#
# Please note that this table should not become too big since it 
httpd_admin=enabled
#
# expire.ldap_auth
#
# Enable expiration of the ldap_auth cache
ldap_auth=enabled

[services]
#
# services.dhcpd
#
# Should DHCPd be managed by PacketFence?
dhcpd=enabled
#
# services.haproxy
#
# Should haproxy be started?
haproxy=enabled
#
# services.pfdns
#
# Should pfdns be managed by PacketFence?
pfdns=enabled
#
# services.snort
#
# Should snort be managed by PacketFence?
snort=enabled
#
# services.suricata
#
# Should suricata be managed by PacketFence?
suricata=enabled
#
# services.radiusd
#
# Should radiusd be managed by PacketFence?
radiusd=enabled
#
# services.iptables
#
# Should iptables be managed by PacketFence?
iptables=enabled
#
# services.memcached
#
# Should memcached be managed by PacketFence?
memcached=enabled
#
# services.pfbandwidthd
#
# Should pfbandwidthd be managed by PacketFence?
pfbandwidthd=disabled
#
# services.httpd_admin
#
# Should httpd.admin be started?
httpd_admin=enabled
#
# services.httpd_portal
#
# Should httpd.portal be started?
httpd_portal=enabled
#
# services.httpd_webservices
#
# Should httpd.webservices be started?
httpd_webservices=enabled
#
# services.httpd_aaa
#
# Should httpd.aaa be started?
httpd_aaa=enabled
#
# services.httpd_proxy
#
# Should httpd.proxy be started?
httpd_proxy=enabled
#
# services.pfsetvlan
#
# Should pfsetvlan be managed by PacketFence?
pfsetvlan=enabled
#
# services.snmptrapd
#
# Should snmptrapd be managed by PacketFence?
snmptrapd=enabled
#
# services.pfmon
#
# Should pfmon be managed by PacketFence?
pfmon=enabled
#
# services.pfdhcplistener
#
# Should pfdhcplistener be started?
pfdhcplistener=enabled
#
# services.keepalived
#
# Should keepalived be started?
keepalived=enabled
#
# services.snort_binary
#
# Location of the snort binary. Only necessary to change if you are not running the RPMed version. 
snort_binary=/usr/sbin/snort
#
# services.suricata_binary
# 
# Location of the suricata binary.
suricata_binary=/usr/bin/suricata
#
# services.haproxy_binary
#
# Location of the haproxy binary. Only necessary to change if you are not running the RPMed version.
haproxy_binary=/usr/sbin/haproxy
#
# services.httpd_binary
#
# Location of the apache binary. Only necessary to change if you are not running the RPMed version.
httpd_binary=/usr/sbin/httpd
#
# services.dhcpd_binary
#
# Location of the dhcpd binary. Only necessary to change if you are not running the RPMed version.
dhcpd_binary=/usr/sbin/dhcpd
#
# services.snmptrapd_binary
#
# Location of the snmptrapd binary. Only necessary to change if you are not using the RPMed version.
snmptrapd_binary=/usr/sbin/snmptrapd
# 
# services.radiusd_binary
# 
# Location of the named binary. Only necessary to change if you are not running the RPMed version.
radiusd_binary=/usr/sbin/radiusd
# 
# services.arp_binary
# 
# location of the arp binary. only necessary to change if you are not running the rpmed version.
arp_binary=/sbin/arp
# 
# services.iptables_binary
# 
# location of the iptables binary. only necessary to change if you are not running the rpmed version.
iptables_binary=/sbin/iptables
# 
# services.memcached_binary
# 
# Location of the memcached binary. Only necessary to change if you are not running the pre-packaged version.
memcached_binary=/usr/bin/memcached
#
# services.keepalived_binary
#
# Location of the keepalived binary. Only necessary to change if you are not running the RPMed version.
keepalived_binary=/usr/sbin/keepalived
# 
# services.memcached_memory_usage
# 
# The maximum of memory that memcached will use
memcached_memory_usage=64
# 
# services.memcached_max_item_size
# 
# The maximum of size of the items allowed to be stored
memcached_max_item_size=1M
# 
# services.httpd_mod_qos
# 
# Enable mod_qos
httpd_mod_qos=disabled
# 
# services.httpd_mod_qos_maximum_users
# 
# The maximum connections per device 
httpd_mod_qos_maximum_connections_per_device=5

[vlan]
#
# vlan.closelocationlogonstop
#
# Should open locationlog entries be closed when pfsetvlan is 
# stopped
closelocationlogonstop=disabled
#
#
# vlan.nbtraphandlerthreads
#
# Number of trap handler threads pfsetvlan should start
nbtraphandlerthreads = 5
#
# vlan.nbtrapparserthreads
#
# Number of trap parser threads pfsetvlan should start
nbtrapparserthreads = 3
#
# vlan.bounce_duration
#
# Delay to wait between the shut / no-shut on a port. Some OS need a higher value than others.
# Default should be reasonable for almost every OS but is too long for the usual proprietary OS.
bounce_duration = 4s
#
# vlan.trap_limit
#
# Controls whether or not the trap_limit feature is enabled. Trap limiting is
# a way to limit the damage done by malicious users or misbehaving switch 
# that sends too many traps to PacketFence causing it to be overloaded. Trap
# limiting is controlled by the trap_limit_threshold and trap_limit_action 
# parameters. Default is enabled.
trap_limit = enabled
#
# vlan.trap_limit_threshold
#
# Maximum number of SNMP traps that a switchport can send to PacketFence within
# a minute without being flagged as DoS. Defaults to 100
trap_limit_threshold = 100
#
# vlan.trap_limit_action
#
# Action that PacketFence will take if the vlan.trap_limit_threshold is reached.
# Defaults to none. email will send an email every hour if the limit's still reached.
# shut will shut the port on the switch and will also send an email even if email is not
# specified.
trap_limit_action = 

[inline]
#
# inline.ports_redirect
#
# Ports to intercept and redirect for trapped and unregistered systems.  Defaults to 80/tcp (HTTP), 443/tcp (HTTPS).
# Redirecting 443/tcp (SSL) will work, although users might get certificate errors if you didn't install a valid 
# certificate or if you don't use DNS (although IP-based certificates supposedly exist)
# Redirecting 53/udp (DNS) seems to have issues and is also not recommended.
# We also have experimental IMAP and POP3 listeners which give fake emails telling users to open their browsers.
# Enable them via the ports.listeners parameter and add the IMAP (143/tcp) and POP3 (110/tcp) here.
ports_redirect=80/tcp,443/tcp
#
# inline.should_reauth_on_vlan_change
# Should have to reauthenticate the node if it change vlan
should_reauth_on_vlan_change = disabled
#
# inline.interfaceSNAT
# Choose the interface(s) you want to use to enable snat (by default itÂ´s the management interface)
interfaceSNAT=

# inline.accounting
#
# Should we handle accouting data for inline clients?
# This controls inline accouting tasks in pfmon.
accounting = disabled

# inline.layer3_accounting_session_timeout
#
# Accounting 'sessions' created by pfbandwidthd (level 3 traffic only) that haven't been updated for more than this
# amount of seconds will be considered inactive.
# This should be higher than the interval at which pfmon runs
# Defaults to 300 - 5 minutes
layer3_accounting_session_timeout = 300

# inline.layer3_accounting_sync_interval
#
# Interval at which pfbandwidthd (level 3 traffic only) should dump collected information into the database.
# This should be lower than the interval at which pfmon runs
# Defaults to 41 seconds
layer3_accounting_sync_interval = 41

[servicewatch]
#
# servicewatch.email
#
# Should pfcmd service pf watch send an email if services are not running?
# You must make sure to call the watch command. Installing it in the cron is the
# recommended approach:
# */5 * * * * /usr/local/pf/bin/pfcmd service pf watch
email=enabled
#
# servicewatch.restart
#
# Should pfcmd service pf watch restart PF if services are not running?
# You must make sure to call the watch command. Installing it in the cron is the
# recommended approach:
# */5 * * * * /usr/local/pf/bin/pfcmd service pf watch
restart=disabled

[captive_portal]
#
# captive_portal.network_detection
#
# Enable or not the network detection feature after registration
network_detection=enabled
#
# captive_portal.network_detection_ip
#
# This IP is used as the webserver who hosts the common/network-access-detection.gif which is used to detect if network
# access was enabled. 
# It cannot be a domain name since it is used in registration or quarantine where DNS is blackholed.
# It is recommended that you allow your users to reach your packetfence server and put your LAN's PacketFence IP.
# By default we will make this reach PacketFence's website as an easy solution.
#
network_detection_ip = 192.95.20.194
#
# captive_portal.image_path
#
# This is the path where the gif is on the webserver to detect if the network access
# has been enabled.
image_path = /common/network-access-detection.gif
#
# captive_portal.loadbalancers_ip
#
# If the captive portal is put behind load-balancer(s) that act at Layer 7 
# (HTTP level) effectively doing reverse proxying then the captive portal no 
# longer sees the IP of the node trying to access the portal. In that case,
# the load-balancers must do SSL offloading and add a X-Forwarded-By header
# in the HTTP traffic they forward to PacketFence. Most do by default. Then
# in this parameter you must specify the IP of the various load balancers.
# This will instruct the captive portal to look for client IPs in the 
# X-Forwarded-For instead of the actual TCP session when it matches an IP
# in the list. Format is a comma separated list of IPs. Note: Apache access
# log format is not changed to automatically log the X-Forwarded-By header.
# Modify conf/httpd.conf.d/captive-portal-common.conf to use 
# loadbalanced_combined instead of combined in CustomLog statement.
loadbalancers_ip=
#
# captive_portal.secure_redirect
#
# If secure_redirect is enabled, the captive portal uses HTTPS when redirecting
# captured clients. This is the default behavior.
secure_redirect=enabled
#
# captive_portal.status_only_on_production
#
# If status_only_on_production is enabled, the /status page will only be available on the
# production network. This is disabled by default
status_only_on_production=disabled

[advanced]
#
# advanced.reevaluate_access_reasons
#
# After which calls to pfcmd do we have to re-evaluate the state of a node and re-assign VLAN or change iptables rules
reevaluate_access_reasons=node_modify,manage_register,manage_deregister,manage_vclose,manage_vopen,violation_modify,violation_add,violation_delete,redir.cgi,pfcmd_vlan
#
# advanced.pfcmd_error_color
#
# Color of the error text for pfcmd
pfcmd_error_color=red
#
# advanced.pfcmd_warning_color
#
# Color of the warning text for pfcmd
pfcmd_warning_color=yellow
#
# advanced.pfcmd_success_color
#
# Color of the success text for pfcmd
pfcmd_success_color=green

[provisioning]
#
# provisioning.autoconfig
#
# Enable or disable the XML mobile config generation for wireless on iPhones, iPods, and iPads
autoconfig = disabled

#
# provisioning.ssid
#
# SSID name where the users need to connect to upon registration
ssid = SSID-Hidden

#
# provisioning.category
#
# Accessible to node that are member of this category
category = any

#
# provisioning.certificate
#
# Certificate to send to the node
certificate = 

[billing]
#
# billing.gateway
#
# The payment gateway to process the payments
gateway = authorize_net
#
# billing.authorizenet_posturl
#
# The payment gateway processing URL (Provided by Authorize.net)
authorizenet_posturl = https://test.authorize.net/gateway/transact.dll
#
# billing.authorizenet_login
#
# The merchant's unique API Login ID (Provided by Authorize.net)
authorizenet_login =
#
# billing.authorizenet_trankey
#
# The merchant's unique Transaction Key (Provided by Authorize.net)
authorizenet_trankey =

mirapay_url = https://ms1.eigendev.com/OFT/EigenOFT_d.php

mirapay_currency = USD

mirapay_terminal_id =

mirapay_terminal_id_group =

mirapay_hash_password =

[node_import]
#
# node_import.pid
#
# Default pid value to assign to imported nodes.
pid=admin
#
# node_import.category
#
# Default category to assign to imported nodes.
category=default
#
# node_import.voip
#
# By default is an imported node a Voice over IP device or not?
voip=no

[webservices]
#
# webservices.user
#
# username to use to connect to the webAPI
user =
#
# webservices.pass
#
# password of the username
pass =
#
# webservices.host
#
# host of the webAPI
host=127.0.0.1
#
# webservices.proto
#
# proto to use
proto=http
#
# webservices.port
#
# port to use
port=9090
#
# webservices.aaa_port
#
# port to use for authentication
aaa_port=7070

[maintenance]
#
# maintenance.iplog_cleanup_interval
#
# iplog cleanup interval
iplog_cleanup_interval=60s
#
# maintenance.iplog_cleanup_batch
#
# iplog cleanup batch
iplog_cleanup_batch=100
#
# maintenance.iplog_cleanup_timeout
#
# iplog cleanup timeout
iplog_cleanup_timeout=10s
#
# maintenance.node_cleanup_interval
#
# locationlog cleanup interval
locationlog_cleanup_interval=60s
#
# maintenance.locationlog_cleanup_batch
#
# locationlog cleanup batch
locationlog_cleanup_batch=100
#
# maintenance.locationlog_cleanup_timeout
#
# locationlog cleanup timeout
locationlog_cleanup_timeout=10s
#
# maintenance.node_cleanup_interval
#
# node cleanup interval
node_cleanup_interval=60s
#
# maintenance.traplog_cleanup_interval
#
# traplog cleanup interval
traplog_cleanup_interval=60s
#
# maintenance.httpd_admin_cleanup_interval
#
# httpd.admin cleanup interval=60s
httpd_admin_cleanup_interval=60s
#
# maintenance.httpd_portal_cleanup_interval
#
# httpd.portal cleanup interval=60s
httpd_portal_cleanup_interval=60s
#
# maintenance.nodes_maintenance_interval
#
# nodes maintenance interval
nodes_maintenance_interval=60s
#
# maintenance.violation_maintenance_interval
#
# violation maintenance interval
violation_maintenance_interval=60s
#
# maintenance.violation_maintenance_batch
#
# violation maintenance batch
violation_maintenance_batch=1000
#
# maintenance.violation_maintenance_timeout
#
# violation maintenance timeout
violation_maintenance_timeout=10s
#
# maintenance.inline_accounting_maintenance_interval
#
# inline accounting maintenance interval
inline_accounting_maintenance_interval=60s
#
# maintenance.acct_maintenance_interval
#
# acct maintenance interval
acct_maintenance_interval=60s
#
# maintenance.provisioning_compliance_poll_interval
#
# Interval at which Packetfence runs the polling enforcement on the provisioners
provisioning_compliance_poll_interval=300s
#
# maintenance.ldap_auth_cache_cleanup_interval
#
# Interval at which Packetfence purges the ldap_auth cache
ldap_auth_cache_cleanup_interval=600s

# maintenance.cluster_sync_interval
#
# Interval at which PacketFence runs the sync between all the members of the cluster
cluster_sync_interval=60s

[active_active]
#
# active_active.members
#
# List of ip separate by a comma of all the cluster members
members=
#
# active_active.password
#
# Shared KEY for vrrp protocol (Must be the same on all members).
password=1234
