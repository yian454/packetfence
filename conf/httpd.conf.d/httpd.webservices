#Webservices apache configuration file

#Debian Specific
<IfDefine debian>
  <IfModule !prefork.c>
    LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
  </IfModule>
  <IfModule !mod_perl.c>
    LoadModule perl_module /usr/lib/apache2/modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module /usr/lib/apache2/modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_auth_basic.c>
    LoadModule auth_basic_module /usr/lib/apache2/modules/mod_auth_basic.so
  </IfModule>
  <IfModule !mod_authn_file.c>
    LoadModule authn_file_module /usr/lib/apache2/modules/mod_authn_file.so
  </IfModule>
  <IfModule !mod_authz_groupfile.c>
    Loadmodule authz_groupfile_module /usr/lib/apache2/modules/mod_authz_groupfile.so
  </IfModule>
  <IfModule !mod_authz_user.c>
    LoadModule authz_user_module /usr/lib/apache2/modules/mod_authz_user.so
  </IfModule>
  <IfModule !mod_authz_host.c>
    LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so
  </IfModule>
  <IfModule !mod_status.c>
    LoadModule status_module /usr/lib/apache2/modules/mod_status.so
  </IfModule>
</IfDefine>

#RHEL Specific
<IfDefine rhel>
  <IfModule !prefork.c>
    LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
  </IfModule>
  <IfModule !mod_perl.c>
    LoadModule perl_module modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_auth_basic.c>
    LoadModule auth_basic_module modules/mod_auth_basic.so
  </IfModule>
  <IfModule !mod_authn_file.c>
    LoadModule authn_file_module modules/mod_authn_file.so
  </IfModule>
  <IfModule !mod_authz_groupfile.c>
    Loadmodule authz_groupfile_module modules/mod_authz_groupfile.so
  </IfModule>
  <IfModule !mod_authz_user.c>
    LoadModule authz_user_module modules/mod_authz_user.so
  </IfModule>
  <IfModule !mod_authz_host.c>
    LoadModule authz_host_module modules/mod_authz_host.so
  </IfModule>
  <IfModule !mod_status.c>
    LoadModule status_module modules/mod_status.so
  </IfModule>
</IfDefine>


PerlSwitches -I/usr/local/pf/lib
PerlSwitches -I/usr/local/pf/html/pfappserver/lib
PerlPostConfigRequire /usr/local/pf/lib/pf/web/webservices_modperl_require.pl
PerlLoadModule pf::WebAPI

Mutex posixsem default
Mutex posixsem ssl-cache
<Perl>
use pf::config qw();


my $PfConfig = \%pf::config::Config;
my $management_network = $pf::config::management_network;
my $install_dir = $pf::config::install_dir;
my $var_dir = $pf::config::var_dir;
my $host;

$PidFile = $install_dir.'/var/run/httpd.webservices.pid';

$Include = $install_dir.'/conf/httpd.conf.d/log.conf';

$User = "pf";
$Group = "pf";

$PerlInitHandler = "pf::WebAPI::InitHandler";

if (defined($PfConfig->{'alerting'}{'fromaddr'}) && $PfConfig->{'alerting'}{'fromaddr'} ne '') {
    $ServerAdmin = $PfConfig->{'alerting'}{'fromaddr'};
} else {
    $ServerAdmin = "root\@".$PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'};
}

$ServerTokens = "Prod";
$ServerSignature = "Off";
$UseCanonicalName = "Off";
$Timeout = "50";
$KeepAliveTimeout = "10";

$MaxClients = "256";
$StartServers = "10";
$MinSpareServers = "3";
$MaxSpareServers = "10";
$HostnameLookups = "off";
$MaxRequestsPerChild = "1000";

$SSLPassPhraseDialog = "builtin";
$SSLSessionCache = "shm:".$install_dir."/var/ssl_wcache(512000)";
$SSLSessionCacheTimeout = "300";
$SSLRandomSeed = "startup builtin";
$SSLRandomSeed = "startup file:/dev/urandom 1024";
$SSLRandomSeed = "connect builtin";
$SSLRandomSeed = "connect file:/dev/urandom 1024";
$SSLProtocol = "All -SSLv2 -SSLv3";
$SSLCipherSuite = "EECDH+AES:EDH+AES:-SHA1:EECDH+RC4:EDH+RC4:RC4-SHA:EECDH+AES256:EDH+AES256:AES256-SHA:!aNULL:!eNULL:!EXP:!LOW:!MD5";
$SSLHonorCipherOrder = "on";

$ErrorLog = $install_dir.'/logs/httpd.webservices.error';

$NameVirtualHost => "*:$PfConfig->{'ports'}{'soap'}";

if (defined($management_network->{'Tip'}) && $management_network->{'Tip'} ne '') {
    if (defined($management_network->{'Tvip'}) && $management_network->{'Tvip'} ne '') {
        $host = $management_network->{'Tvip'};
    } else {
        $host = $management_network->{'Tip'};
    }
    @Listen =  ("127.0.0.1:".$PfConfig->{'ports'}{'soap'},$host.":".$PfConfig->{'ports'}{'soap'});

    push (@NameVirtualHost,"127.0.0.1:".$PfConfig->{'ports'}{'soap'});
    push (@NameVirtualHost,$host.":".$PfConfig->{'ports'}{'soap'});

    #Generate Virtualhost for management interface (ssl enabled and auth enabled)
    push @{ $VirtualHost{$host.":".$PfConfig->{'ports'}{'soap'}} },
        {
             ServerName          => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
             DocumentRoot        => $install_dir.'/html/pfappserver/lib',
             ErrorLog            => $install_dir.'/logs/httpd.webservices.error',
             CustomLog           => $install_dir.'/logs/httpd.webservices.access combined',
             SSLEngine           => 'on',
             Include             => $var_dir.'/conf/ssl-certificates.conf',
             Location     => {
                  "/" => {
                      SetHandler          => 'modperl',
                      PerlResponseHandler => 'pf::WebAPI',
                      PerlAuthenHandler   => 'pf::WebAPI::AuthenHandler',
                      AuthName            => "PacketFence_Authentication",
                      AuthType            => 'Basic',
                      require             => 'valid-user',
                  },
             },
       };


} else {
    $Listen = "127.0.0.1:".$PfConfig->{'ports'}{'soap'};
    push (@NameVirtualHost,"127.0.0.1:".$PfConfig->{'ports'}{'soap'});
}

#Generate the default soap listener on localhost

push @{ $VirtualHost{"127.0.0.1:$PfConfig->{'ports'}{'soap'}"} },
    {
         ServerName          => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
         DocumentRoot        => $install_dir.'/html/pfappserver/lib',
         ErrorLog            => $install_dir.'/logs/httpd.webservices.error',
         CustomLog           => $install_dir.'/logs/httpd.webservices.access combined',
         SetHandler          => 'modperl',
         PerlResponseHandler => 'pf::WebAPI',
         Location     => {
             "/" => {
                 SetHandler => 'modperl',
                 PerlResponseHandler => 'pf::WebAPI',
             },
             "/apache_status/" => {
                 SetHandler => 'server-status',
            },
         },
    };


</Perl>

