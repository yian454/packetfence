<IfDefine debian>
  <IfModule !prefork.c>
    LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
  </IfModule>
  <IfModule !mod_perl.c>
    LoadModule perl_module /usr/lib/apache2/modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module /usr/lib/apache2/modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module /usr/lib/apache2/modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_headers.c>
    LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so
  </IfModule>
  <IfModule !mod_proxy.c>
    LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.so
  </IfModule>
  <IfModule !proxy_http.c>
    LoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so
  </IfModule>
  <IfModule !mod_authz_host.c>
    LoadModule authz_host_module /usr/lib/apache2/modules/mod_authz_host.so
  </IfModule>
  <IfModule !mod_setenvif.c>
    LoadModule setenvif_module /usr/lib/apache2/modules/mod_setenvif.so
  </IfModule>
  <IfModule !mod_rewrite.c>
    LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so
  </IfModule>
  <IfModule !mod_alias.c>
    LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
  </IfModule>
  <IfModule !mod_mime.c>
    LoadModule mime_module /usr/lib/apache2/modules/mod_mime.so
  </IfModule>
  <IfModule !mod_apreq2.c>
    LoadModule apreq_module /usr/lib/apache2/modules/mod_apreq2.so
  </IfModule>
  # To activate this module add an entry in /etc/hosts for this server hostname.
  #<IfModule !mod_unique_id.c>
  #  LoadModule unique_id_module /usr/lib/apache2/modules/mod_unique_id.so
  #</IfModule>
  <IfModule !mod_qos.c>
    LoadModule qos_module /usr/lib/apache2/modules/mod_qos.so
  </IfModule>
  <IfModule !mod_deflate.c>
    LoadModule deflate_module /usr/lib/apache2/modules/mod_deflate.so
  </IfModule>
  <IfModule !mod_status.c>
    LoadModule status_module /usr/lib/apache2/modules/mod_status.so
  </IfModule>
</IfDefine>

#RHEL specific
<IfDefine rhel>
  <IfModule !prefork.c>
    LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
  </IfModule>
  <IfModule !mod_perl.c>
    LoadModule perl_module modules/mod_perl.so
  </IfModule>
  <IfModule !mod_log_config.c>
    LoadModule log_config_module modules/mod_log_config.so
  </IfModule>
  <IfModule !mod_ssl.c>
    LoadModule ssl_module modules/mod_ssl.so
  </IfModule>
  <IfModule !mod_headers.c>
    LoadModule headers_module modules/mod_headers.so
  </IfModule>
  <IfModule !mod_proxy.c>
    LoadModule proxy_module modules/mod_proxy.so
  </IfModule>
  <IfModule !proxy_http.c>
    LoadModule proxy_http_module modules/mod_proxy_http.so
  </IfModule>
  <IfModule !mod_authz_host.c>
    LoadModule authz_host_module modules/mod_authz_host.so
  </IfModule>
  <IfModule !mod_setenvif.c>
    LoadModule setenvif_module modules/mod_setenvif.so
  </IfModule>
  <IfModule !mod_rewrite.c>
    LoadModule rewrite_module modules/mod_rewrite.so
  </IfModule>
  <IfModule !mod_alias.c>
    LoadModule alias_module modules/mod_alias.so
  </IfModule>
  <IfModule !mod_mime.c>
    LoadModule mime_module modules/mod_mime.so
  </IfModule>
  <IfModule !mod_apreq2.c>
    LoadModule apreq_module modules/mod_apreq2.so
  </IfModule>
  # To activate this module add an entry in /etc/hosts for this server hostname.
  #<IfModule !mod_unique_id.c>
  #  LoadModule unique_id_module modules/mod_unique_id.so
  #</IfModule>
  <IfModule !mod_qos.c>
    LoadModule qos_module modules/mod_qos.so
  </IfModule>
  <IfModule !mod_deflate.c>
    LoadModule deflate_module modules/mod_deflate.so
  </IfModule>
  <IfModule !mod_status.c>
    LoadModule status_module modules/mod_status.so
  </IfModule>
</IfDefine>

PerlSwitches -I/usr/local/pf/lib
PerlSwitches -I/usr/local/pf/html/captive-portal/lib
# mod_perl handlers are virtually assigned to /perl/
# The TransHandler handles the 'captive-portal' core piece redirecting to the
# portal if the URL is not otherwised allowed by passthrough or part of the
# portal itself.
PerlPostConfigRequire /usr/local/pf/lib/pf/web/captiveportal_modperl_require.pl
PerlLoadModule captiveportal
PerlLoadModule pf::web::dispatcher
PerlLoadModule pf::web::release
# The TransHandler handles the 'captive-portal' core piece redirecting to the
# portal if the URL is not otherwised allowed by passthrough or part of the
# portal itself.

Mutex posixsem default
Mutex posixsem ssl-cache
ServerLimit 512

Header always set X-DNS-Prefetch-Control off

<Proxy *>
  Order deny,allow
  Allow from all
</Proxy>

<Files ~ "\.(cgi?)$">
  SSLOptions +StdEnvVars
</Files>

SetEnvIf User-Agent ".*MSIE.*" \
  nokeepalive ssl-unclean-shutdown \
  downgrade-1.0 force-response-1.0

TypesConfig /etc/mime.types



<Perl>
BEGIN {
    use pf::log 'service' => 'httpd.portal';
}
use pf::config qw();
use pf::util qw(isenabled);
use pf::authentication();
use pf::web::constants();
use Tie::DxHash;
use pf::services::manager::httpd();
use Apache::SSLLookup;

sub gen_conf {
    my %conf;
    tie %conf, 'Tie::DxHash';

    %conf = @_;
    return \%conf;
} 

my $PfConfig = \%pf::config::Config;
my $management_network = $pf::config::management_network;
my $install_dir = $pf::config::install_dir;
my $var_dir = $pf::config::var_dir;
my @internal_nets = @pf::config::internal_nets;
my $host;
my $vhost;

$PidFile = $install_dir.'/var/run/httpd.portal.pid';

$Include = $install_dir.'/conf/httpd.conf.d/log.conf';

$User = "pf";
$Group = "pf";

$PerlOptions = "+GlobalRequest";
$ProxyRequests = "Off";

if (defined($PfConfig->{'alerting'}{'fromaddr'}) && $PfConfig->{'alerting'}{'fromaddr'} ne '') {
    $ServerAdmin = $PfConfig->{'alerting'}{'fromaddr'};
} else {
    $ServerAdmin = "root\@".$PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'};
}

$ServerTokens = "Prod";
$ServerSignature = "Off";
$UseCanonicalName = "Off";
$Timeout = "5";
$KeepAliveTimeout = "3";

$MaxClients = pf::services::manager::httpd::calculate_max_clients(pf::services::manager::httpd::get_total_system_memory());
$StartServers =  pf::services::manager::httpd::calculate_start_servers($MaxClients);
$MinSpareServers = pf::services::manager::httpd::calculate_min_spare_servers($MaxClients);

if( pf::config::isenabled ($PfConfig->{services}{httpd_mod_qos})) {
    my $qos = $MaxClients * .7;
    $QS_SrvMaxConnClose = $qos;
    $QS_SrvMaxConnPerIP = $PfConfig->{services}{httpd_mod_qos_maximum_connections_per_device};
}

$HostnameLookups = "off";
$MaxRequestsPerChild = "1000";
$PerlInitHandler = "pf::WebAPI::InitHandler";


$SSLPassPhraseDialog = "builtin";
$SSLSessionCache = "shm:".$install_dir."/var/ssl_pcache(512000)";
$SSLSessionCacheTimeout = "300";
$SSLRandomSeed = "startup builtin";
$SSLRandomSeed = "startup file:/dev/urandom 1024";
$SSLRandomSeed = "connect builtin";
$SSLRandomSeed = "connect file:/dev/urandom 1024";
$SSLProtocol = "All -SSLv2 -SSLv3";
$SSLCipherSuite = "EECDH+AES:EDH+AES:-SHA1:EECDH+RC4:EDH+RC4:RC4-SHA:EECDH+AES256:EDH+AES256:AES256-SHA:!aNULL:!eNULL:!EXP:!LOW:!MD5";
$SSLHonorCipherOrder = "on";

$ErrorLog = $install_dir.'/logs/portal_error_log';

my $routedNets = join(" ", pf::util::get_routed_isolation_nets(), pf::util::get_routed_registration_nets() , pf::util::get_inline_nets());
my $loadbalancersIp = join(" ", keys %{$pf::config::CAPTIVE_PORTAL{'loadbalancers_ip'}});
my $status_only_on_production = pf::config::isenabled ($PfConfig->{captive_portal}{status_only_on_production});
my $allowed_from_all_urls = '';
my @status_options;
if($status_only_on_production) {
    @status_options = (
        "/status" => {
            "Order"             => "allow,deny",
            "Deny"              => "from $routedNets $loadbalancersIp 127.0.0.1 ",
            "Allow"             => "from all",
            SetHandler          => 'modperl',
            PerlResponseHandler => 'captiveportal',
        },
    );
}
else {
    $allowed_from_all_urls = "|$WEB::URL_STATUS";
}
# signup and preregister if pre-registration is allowed
my $guest_regist_allowed = scalar keys %pf::authentication::guest_self_registration;
if ($guest_regist_allowed && isenabled($pf::config::Config{'guests_self_registration'}{'preregistration'})) {
    # | is for a regexp "or" as this is pulled from a 'Location ~' statement
    $allowed_from_all_urls .= "|$WEB::URL_SIGNUP|$WEB::CGI_SIGNUP|$WEB::URL_PREREGISTER";
}
# /activate/email allowed if sponsor or email mode enabled
my $email_enabled = $pf::authentication::guest_self_registration{$SELFREG_MODE_EMAIL};
my $sponsor_enabled = $pf::authentication::guest_self_registration{$SELFREG_MODE_SPONSOR};
if ($guest_regist_allowed && ($email_enabled || $sponsor_enabled)) {
    # | is for a regexp "or" as this is pulled from a 'Location ~' statement
    $allowed_from_all_urls .= "|$WEB::URL_EMAIL_ACTIVATION";
}
my @allowed_from_all_options;
if ($allowed_from_all_urls) {
    @allowed_from_all_options = (
        "~ \"/$allowed_from_all_urls\"" => {
            "Allow"             => "from all",
            SetHandler          => 'modperl',
            PerlResponseHandler => 'captiveportal',
        },
    );
}

foreach my $interface (@internal_nets) {
    if (defined($interface->{'Tip'}) && $interface->{'Tip'} ne '') {
        if (defined($interface->{'Tvip'}) && $interface->{'Tvip'} ne '') {
            $vhost = $interface->{'Tvip'};
        } else {
            $vhost = $interface->{'Tip'};
       }
    }
    push (@Listen,$vhost.":80");
    push (@Listen,$vhost.":443");
    push (@NameVirtualHost,$vhost.":80");
    push (@NameVirtualHost,$vhost.":443");
    push (@{ $VirtualHost{$vhost.":80"} }, gen_conf(
         ServerName   => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
         DocumentRoot => "${install_dir}/html/captive-portal/lib",
         ErrorLog     => "${install_dir}/logs/httpd.portal.error",
         CustomLog    => "${install_dir}/logs/httpd.portal.access combined",
         Include => "${var_dir}/conf/captive-portal-common.conf",
         AllowEncodedSlashes => "on",
         Alias        => "/static ${install_dir}/html/captive-portal/root/static",
         Alias        => "/common ${install_dir}/html/common",
         PerlModule   => 'captiveportal',
         PerlTransHandler => 'pf::web::dispatcher::custom',
         Location     => {
             "/" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'modperl',
                 PerlResponseHandler => 'captiveportal',
             },
             "/static" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'default-handler',
             },
             "/common" => {
                 "Allow" => "from all",
                 SetHandler => 'default-handler',
             },
             "/release" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler =>  'modperl',
                 PerlResponseHandler =>  'pf::web::release',
                 PerlOptions => '+GlobalRequest +ParseHeaders'
             },
             "/content" => {
                "Allow" => "from all",
             },
             @status_options,
             @allowed_from_all_options,
         },
    ));
    push (@{ $VirtualHost{$vhost.":443"} }, gen_conf(
         ServerName   => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
         DocumentRoot => "${install_dir}/html/captive-portal/lib",
         ErrorLog     => "${install_dir}/logs/httpd.portal.error",
         CustomLog    => "${install_dir}/logs/httpd.portal.access combined",
         Include => "${var_dir}/conf/captive-portal-common.conf",
         AllowEncodedSlashes => "on",
         Alias        => "/static ${install_dir}/html/captive-portal/root/static",
         Alias        => "/common ${install_dir}/html/common",
         PerlModule   => 'captiveportal',
         PerlTransHandler => 'pf::web::dispatcher::custom',
         Location     => {
             "/" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'modperl',
                 PerlResponseHandler => 'captiveportal',
             },
             "/static" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'default-handler',
             },
             "/common" => {
                 "Allow" => "from all",
                 SetHandler => 'default-handler',
             },
             "/release" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler =>  'modperl',
                 PerlResponseHandler =>  'pf::web::release',
                 PerlOptions => '+GlobalRequest +ParseHeaders'
             },
             "/content" => {
                "Allow" => "from all",
             },
             @status_options,
             @allowed_from_all_options,
         },
         SSLEngine => 'on',
         SSLProxyEngine    => 'on',
         Include      => "${var_dir}/conf/ssl-certificates.conf",
    ));
}

if (defined($management_network->{'Tip'}) && $management_network->{'Tip'} ne '') {
    if (defined($management_network->{'Tvip'}) && $management_network->{'Tvip'} ne '') {
        $host = $management_network->{'Tvip'};
    } else {
        $host = $management_network->{'Tip'};
    }

    push (@Listen,$host.":80");
    push (@Listen,$host.":443");
    push (@NameVirtualHost,$host.":80");
    push (@NameVirtualHost,$host.":443");

    push @{ $VirtualHost{$host.":80"} }, gen_conf(
         ServerName   => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
         DocumentRoot => "${install_dir}/html/captive-portal/lib",
         ErrorLog     => "${install_dir}/logs/httpd.portal.error",
         CustomLog    => "${install_dir}/logs/httpd.portal.access combined",
         Include => "${var_dir}/conf/captive-portal-common.conf",
         AllowEncodedSlashes => "on",
         Alias        => "/static ${install_dir}/html/captiveportal/root/static",
         Alias        => "/common ${install_dir}/html/common",
         PerlModule   => 'captiveportal',
         PerlTransHandler => 'pf::web::dispatcher::custom',
         Location     => {
             "/" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'modperl',
                 PerlResponseHandler => 'captiveportal',
             },
             "/static" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'default-handler',
             },
             "/common" => {
                 "Allow" => "from all",
                 SetHandler => 'default-handler',
             },
             "/release" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler =>  'modperl',
                 PerlResponseHandler =>  'pf::web::release',
                 PerlOptions => '+GlobalRequest +ParseHeaders'
             },
             "/content" => {
                "Allow" => "from all",
             },
             @status_options,
             @allowed_from_all_options,
             "/apache_status/" => {
                 SetHandler => 'server-status',
             },
         },
    );
    push @{ $VirtualHost{$host.":443"} }, gen_conf(
         ServerName   => $PfConfig->{'general'}{'hostname'}.".".$PfConfig->{'general'}{'domain'},
         DocumentRoot => "${install_dir}/html/captive-portal/lib",
         ErrorLog     => "${install_dir}/logs/httpd.portal.error",
         CustomLog    => "${install_dir}/logs/httpd.portal.access combined",
         Include => "${var_dir}/conf/captive-portal-common.conf",
         AllowEncodedSlashes => "on",
         Alias        => "/static ${install_dir}/html/captiveportal/root/static",
         Alias        => "/common ${install_dir}/html/common",
         PerlModule   => 'captiveportal',
         PerlTransHandler => 'pf::web::dispatcher::custom',
         Location     => {
             "/" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'modperl',
                 PerlResponseHandler => 'captiveportal',
             },
             "/static" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler => 'default-handler',
             },
             "/common" => {
                 "Allow" => "from all",
                 SetHandler => 'default-handler',
             },
             "/release" => {
                 "Order" => "deny,allow",
                 "Deny" => "from all",
                 "Allow" => "from $routedNets $loadbalancersIp 127.0.0.1 ",
                 SetHandler =>  'modperl',
                 PerlResponseHandler =>  'pf::web::release',
                 PerlOptions => '+GlobalRequest +ParseHeaders'
             },
             "/content" => {
                "Allow" => "from all",
             },
             @status_options,
             @allowed_from_all_options,
         },
         SSLEngine => 'on',
         SSLProxyEngine    => 'on',
         Include      => "${var_dir}/conf/ssl-certificates.conf",
    );

} 

</Perl>

